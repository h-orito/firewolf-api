package com.ort.firewolf.infrastructure.datasource.village

import com.ort.dbflute.allcommon.CDef
import com.ort.dbflute.exbhv.MessageRestrictionBhv
import com.ort.dbflute.exbhv.VillageBhv
import com.ort.dbflute.exbhv.VillageCharaGroupBhv
import com.ort.dbflute.exbhv.VillageDayBhv
import com.ort.dbflute.exbhv.VillagePlayerAccessInfoBhv
import com.ort.dbflute.exbhv.VillagePlayerBhv
import com.ort.dbflute.exbhv.VillagePlayerNotificationBhv
import com.ort.dbflute.exbhv.VillagePlayerStatusBhv
import com.ort.dbflute.exbhv.VillageSettingBhv
import com.ort.dbflute.exbhv.VillageTagBhv
import com.ort.dbflute.exentity.MessageRestriction
import com.ort.dbflute.exentity.Village
import com.ort.dbflute.exentity.VillageCharaGroup
import com.ort.dbflute.exentity.VillageDay
import com.ort.dbflute.exentity.VillagePlayer
import com.ort.dbflute.exentity.VillagePlayerAccessInfo
import com.ort.dbflute.exentity.VillagePlayerNotification
import com.ort.dbflute.exentity.VillagePlayerStatus
import com.ort.dbflute.exentity.VillageSetting
import com.ort.dbflute.exentity.VillageTag
import com.ort.firewolf.domain.model.village.Villages
import com.ort.firewolf.domain.model.village.participant.VillageParticipant
import com.ort.firewolf.domain.model.village.participant.VillageParticipantNotificationCondition
import com.ort.firewolf.domain.model.village.participant.VillageParticipantStatus
import com.ort.firewolf.domain.model.village.setting.VillageCharachip
import com.ort.firewolf.domain.model.village.setting.VillageMessageRestrict
import com.ort.firewolf.domain.model.village.setting.VillageSettings
import com.ort.firewolf.fw.security.FirewolfUser
import com.ort.firewolf.infrastructure.datasource.village.converter.VillageDataConverter
import org.slf4j.LoggerFactory
import org.springframework.cache.annotation.Cacheable
import org.springframework.stereotype.Repository
import java.time.LocalDateTime

@Repository
class VillageDataSource(
    private val villageBhv: VillageBhv,
    private val villageSettingBhv: VillageSettingBhv,
    private val villageCharaGroupBhv: VillageCharaGroupBhv,
    private val villageDayBhv: VillageDayBhv,
    private val villagePlayerBhv: VillagePlayerBhv,
    private val villagePlayerStatusBhv: VillagePlayerStatusBhv,
    private val villagePlayerAccessInfoBhv: VillagePlayerAccessInfoBhv,
    private val messageRestrictionBhv: MessageRestrictionBhv,
    private val villageTagBhv: VillageTagBhv,
    private val villagePlayerNotificationBhv: VillagePlayerNotificationBhv,
) {

    private val logger = LoggerFactory.getLogger(VillageDataSource::class.java)

    /**
     * 村登録
     * @param paramVillage village
     * @return 村ID
     */
    fun registerVillage(
        paramVillage: com.ort.firewolf.domain.model.village.Village
    ): com.ort.firewolf.domain.model.village.Village {
        // 村
        val villageId = insertVillage(paramVillage)
        // 村設定
        insertVillageSettings(villageId, paramVillage.setting)
        // キャラチップ
        insertVillageCharaGroups(villageId, paramVillage.setting.charachip)
        // 発言制限
        insertMessageRestrictionList(villageId, paramVillage.setting)
        // 村日付
        insertVillageDay(
            villageId,
            com.ort.firewolf.domain.model.village.VillageDay(
                id = 1, // dummy
                day = 0,
                noonnight = CDef.Noonnight.昼.code(),
                startDatetime = LocalDateTime.now(),
                dayChangeDatetime = paramVillage.setting.time.startDatetime
            )
        )
        val village = findVillage(villageId)
        // 自動生成村の場合は村名をシンプルにする
        if (paramVillage.setting.rules.autoGenerated) {
            updateVillage(village.copy(name = "${String.format("%04d", village.id)}村"))
        }

        return findVillage(villageId)
    }

    /**
     * 村一覧取得
     * @param user 指定した場合は自分が参加した村一覧
     * @param villageStatusList 指定した場合はそのステータスで絞り込む
     * @return 村一覧
     */
    fun findVillages(
        user: FirewolfUser? = null,
        villageStatusList: List<com.ort.firewolf.domain.model.village.VillageStatus>? = listOf()
    ): Villages {
        val villageList = villageBhv.selectList {
            it.specify().derivedVillagePlayer().count({ vpCB ->
                vpCB.specify().columnVillagePlayerId()
                vpCB.query().setIsGone_Equal(false)
                vpCB.query().setIsSpectator_Equal(false)
            }, Village.ALIAS_participantCount)
            it.specify().derivedVillagePlayer().count({ vpCB ->
                vpCB.specify().columnVillagePlayerId()
                vpCB.query().setIsGone_Equal(false)
                vpCB.query().setIsSpectator_Equal(true)
            }, Village.ALIAS_visitorCount)

            if (user != null) {
                it.query().existsVillagePlayer { vpCB ->
                    vpCB.query().setIsGone_Equal(false)
                    vpCB.query().queryPlayer().setUid_Equal(user.uid)
                }
            }
            if (!villageStatusList.isNullOrEmpty()) {
                it.query().setVillageStatusCode_InScope_AsVillageStatus(
                    villageStatusList.map { status -> status.toCdef() }
                )
            }

            it.query().addOrderBy_VillageId_Desc()
        }
        villageBhv.load(villageList) { loader ->
            loader.loadVillageSetting { }
            loader.loadVillageDay {
                it.query().addOrderBy_Day_Desc()
                it.query().queryNoonnight().addOrderBy_DispOrder_Desc()
            }
            loader.loadMessageRestriction { }
            loader.loadVillageCharaGroup { }
            loader.loadVillageTag {}
        }
        return VillageDataConverter.convertVillageListToVillages(villageList)
    }

    /**
     * 村一覧取得
     * @param villageIdList 村IDリスト
     * @return 村一覧
     */
    fun findVillages(villageIdList: List<Int>): Villages {
        if (villageIdList.isEmpty()) return Villages(listOf())
        val villageList = villageBhv.selectList {
            it.specify().derivedVillagePlayer().count({ vpCB ->
                vpCB.specify().columnVillagePlayerId()
                vpCB.query().setIsGone_Equal(false)
                vpCB.query().setIsSpectator_Equal(false)
            }, Village.ALIAS_participantCount)
            it.specify().derivedVillagePlayer().count({ vpCB ->
                vpCB.specify().columnVillagePlayerId()
                vpCB.query().setIsGone_Equal(false)
                vpCB.query().setIsSpectator_Equal(true)
            }, Village.ALIAS_visitorCount)

            it.query().setVillageId_InScope(villageIdList)
            it.query().addOrderBy_VillageId_Desc()
        }
        villageBhv.load(villageList) { loader ->
            loader.loadVillageSetting { }
            loader.loadVillageDay {
                it.query().addOrderBy_Day_Desc()
                it.query().queryNoonnight().addOrderBy_DispOrder_Desc()
            }
            loader.loadMessageRestriction { }
            loader.loadVillageCharaGroup { }
            loader.loadVillageTag {}
        }

        return VillageDataConverter.convertVillageListToVillages(villageList)
    }

    /**
     * 村一覧取得（詳細）
     * @param villageIdList 村IDリスト
     * @return 村一覧（詳細）
     */
    fun findVillagesAsDetail(villageIdList: List<Int>): Villages {
        if (villageIdList.isEmpty()) return Villages(listOf())
        val villageList = villageBhv.selectList {
            it.specify().derivedVillagePlayer().count({ vpCB ->
                vpCB.specify().columnVillagePlayerId()
                vpCB.query().setIsGone_Equal(false)
                vpCB.query().setIsSpectator_Equal(false)
            }, Village.ALIAS_participantCount)
            it.specify().derivedVillagePlayer().count({ vpCB ->
                vpCB.specify().columnVillagePlayerId()
                vpCB.query().setIsGone_Equal(false)
                vpCB.query().setIsSpectator_Equal(true)
            }, Village.ALIAS_visitorCount)

            it.query().setVillageId_InScope(villageIdList)
            it.query().addOrderBy_VillageId_Desc()
        }
        villageBhv.load(villageList) { loader ->
            loader.loadVillagePlayer { vpCB ->
                vpCB.setupSelect_VillageDay()
                vpCB.query().setIsGone_Equal(false)
            }.withNestedReferrer {
                it.pulloutChara().loadCharaImage { }
                it.loadVillagePlayerAccessInfo { }
                it.loadVillagePlayerStatusByVillagePlayerId { }
                it.loadVillagePlayerStatusByToVillagePlayerId { }
            }
            loader.loadVillageSetting { }
            loader.loadVillageDay {
                it.query().addOrderBy_Day_Asc()
                it.query().queryNoonnight().addOrderBy_DispOrder_Asc()
            }
            loader.loadMessageRestriction { }
            loader.loadVillageCharaGroup { }
            loader.loadVillageTag {}
        }

        return Villages(villageList.map { VillageDataConverter.convertVillageToVillage(it) })
    }

    /**
     * キャッシュを使わず村情報を取得
     */
    fun findVillageWithoutCache(
        villageId: Int,
        excludeGonePlayer: Boolean = true
    ): com.ort.firewolf.domain.model.village.Village {
        return findVillage(villageId, excludeGonePlayer)
    }

    /**
     * 村情報取得
     * @param villageId villageId
     * @return 村情報
     */
    @Cacheable("village")
    fun findVillage(villageId: Int, excludeGonePlayer: Boolean = true): com.ort.firewolf.domain.model.village.Village {
        val village = villageBhv.selectEntityWithDeletedCheck {
            it.query().setVillageId_Equal(villageId)
        }
        villageBhv.load(village) { loader ->
            loader.loadVillagePlayer { vpCB ->
                vpCB.setupSelect_VillageDay()
                vpCB.setupSelect_VillagePlayerNotificationAsOne()
                if (excludeGonePlayer) {
                    vpCB.query().setIsGone_Equal(false)
                }
            }.withNestedReferrer {
                it.pulloutChara().loadCharaImage { }
                it.loadComingOut { }
                it.loadVillagePlayerAccessInfo { }
                it.loadVillagePlayerStatusByVillagePlayerId { }
                it.loadVillagePlayerStatusByToVillagePlayerId { }
            }
            loader.loadVillageSetting { }
            loader.loadVillageDay {
                it.query().addOrderBy_Day_Asc()
                it.query().queryNoonnight().addOrderBy_DispOrder_Asc()
            }
            loader.loadMessageRestriction { }
            loader.loadVillageCharaGroup { }
            loader.loadVillageTag {}
        }

        return VillageDataConverter.convertVillageToVillage(village)
    }

    /**
     * 差分更新
     * @param before village
     * @param after village
     */
    fun updateDifference(
        before: com.ort.firewolf.domain.model.village.Village,
        after: com.ort.firewolf.domain.model.village.Village
    ): com.ort.firewolf.domain.model.village.Village {
        // village
        updateVillageDifference(before, after)
        // village_day
        updateVillageDayDifference(before, after)
        // village_player
        updateVillagePlayerDifference(before, after)
        // village_setting
        updateVillageSettingDifference(before, after)
        // message_restriction
        updateMessageRestrictionDifference(before, after)

        return findVillage(before.id)
    }

    // ===================================================================================
    //                                                                              Update
    //                                                                              ======
    private fun updateVillageDifference(
        before: com.ort.firewolf.domain.model.village.Village,
        after: com.ort.firewolf.domain.model.village.Village
    ) {
        if (before.status.code != after.status.code
            || before.winCamp?.code != after.winCamp?.code
            || before.name != after.name
        ) {
            updateVillage(after)
        }
    }

    private fun updateVillageDayDifference(
        before: com.ort.firewolf.domain.model.village.Village,
        after: com.ort.firewolf.domain.model.village.Village
    ) {
        if (!before.day.existsDifference(after.day)) return
        after.day.dayList
            .filterNot { afterDay ->
                before.day.dayList.any {
                    it.day == afterDay.day && it.noonnight == afterDay.noonnight
                }
            }
            .forEach {
                insertVillageDay(after.id, it)
            }
        after.day.dayList
            .filter { afterDay ->
                before.day.dayList.any { it.id == afterDay.id }
            }.forEach { afterDay ->
                val beforeDay = before.day.dayList.first { it.id == afterDay.id }
                if (afterDay.existsDifference(beforeDay)) updateVillageDay(afterDay)
            }
    }

    private fun updateVillagePlayerDifference(
        before: com.ort.firewolf.domain.model.village.Village,
        after: com.ort.firewolf.domain.model.village.Village
    ) {
        val villageId = after.id
        if (!before.participant.existsDifference(after.participant)
            && !before.spectator.existsDifference(after.spectator)
        ) return
        // 新規
        after.participant.memberList.filterNot { member ->
            before.participant.memberList.any { it.id == member.id }
        }.forEach {
            val participantId = insertVillagePlayer(villageId, it)
            insertVillagePlayerAccessInfos(participantId, it.ipAddresses)
        }
        after.spectator.memberList.filterNot { member ->
            before.spectator.memberList.any { it.id == member.id }
        }.forEach {
            val participantId = insertVillagePlayer(villageId, it)
            insertVillagePlayerAccessInfos(participantId, it.ipAddresses)
        }

        // 更新
        after.participant.memberList.filter { member ->
            before.participant.memberList.any { it.id == member.id }
        }.forEach {
            val beforeMember = before.participant.member(it.id)
            if (it.existsDifference(beforeMember)) {
                updateVillagePlayer(villageId, it)
                updateVillagePlayerStatusDaychangeDifference(it.id, beforeMember.status, it.status)
            }
            insertVillagePlayerAccessInfos(it.id, it.ipAddresses)
        }
        after.spectator.memberList.filter { member ->
            before.spectator.memberList.any { it.id == member.id }
        }.forEach {
            val beforeMember = before.spectator.member(it.id)
            if (it.existsDifference(beforeMember)) updateVillagePlayer(villageId, it)
            insertVillagePlayerAccessInfos(it.id, it.ipAddresses)
        }
    }

    private fun updateVillagePlayerStatusDaychangeDifference(
        participantId: Int,
        current: VillageParticipantStatus,
        changed: VillageParticipantStatus
    ) {
        // 削除
        current.loverIdList.filterNot { changed.loverIdList.contains(it) }
            .forEach { deleteVillagePlayerStatus(participantId, it, CDef.VillagePlayerStatusType.恋絆) }

        // 追加
        changed.loverIdList.filterNot { current.loverIdList.contains(it) }
            .forEach { insertVillagePlayerStatus(participantId, it, CDef.VillagePlayerStatusType.恋絆) }
    }

    private fun updateVillageSettingDifference(
        before: com.ort.firewolf.domain.model.village.Village,
        after: com.ort.firewolf.domain.model.village.Village
    ) {
        val villageId = after.id
        if (!before.setting.existsDifference(after.setting)) return

        after.setting.capacity.let { afterCapacity ->
            if (!before.setting.capacity.existsDifference(afterCapacity)) return@let
            updateVillageSetting(villageId, CDef.VillageSettingItem.最低人数, afterCapacity.min.toString())
            updateVillageSetting(villageId, CDef.VillageSettingItem.最大人数, afterCapacity.max.toString())
        }
        after.setting.time.let { afterTime ->
            if (!before.setting.time.existsDifference(afterTime)) return@let
            updateVillageSetting(villageId, CDef.VillageSettingItem.期間形式, afterTime.termType)
            updateVillageSetting(
                villageId,
                CDef.VillageSettingItem.開始予定日時,
                afterTime.startDatetime.format(VillageDataConverter.DATETIME_FORMATTER)
            )
            updateVillageSetting(
                villageId,
                CDef.VillageSettingItem.更新間隔秒,
                afterTime.dayChangeIntervalSeconds.toString()
            )
            updateVillageSetting(villageId, CDef.VillageSettingItem.沈黙時間, afterTime.silentHours?.toString() ?: "")
        }
        after.setting.organizations.let { afterOrg ->
            if (!before.setting.organizations.existsDifference(afterOrg)) return@let
            updateVillageSetting(villageId, CDef.VillageSettingItem.構成, afterOrg.toString())
        }
        after.setting.rules.let { afterRules ->
            if (!before.setting.rules.existsDifference(afterRules)) return@let
            updateVillageSetting(villageId, CDef.VillageSettingItem.記名投票か, toFlg(afterRules.openVote))
            updateVillageSetting(
                villageId,
                CDef.VillageSettingItem.役職希望可能か,
                toFlg(afterRules.availableSkillRequest)
            )
            updateVillageSetting(villageId, CDef.VillageSettingItem.見学可能か, toFlg(afterRules.availableSpectate))
            updateVillageSetting(
                villageId,
                CDef.VillageSettingItem.墓下役職公開ありか,
                toFlg(afterRules.openSkillInGrave)
            )
            updateVillageSetting(
                villageId,
                CDef.VillageSettingItem.墓下見学発言を生存者が見られるか,
                toFlg(afterRules.visibleGraveMessage)
            )
            updateVillageSetting(
                villageId,
                CDef.VillageSettingItem.突然死ありか,
                toFlg(afterRules.availableSuddenlyDeath)
            )
            updateVillageSetting(villageId, CDef.VillageSettingItem.コミット可能か, toFlg(afterRules.availableCommit))
            updateVillageSetting(villageId, CDef.VillageSettingItem.役欠けありか, toFlg(afterRules.availableDummySkill))
            updateVillageSetting(villageId, CDef.VillageSettingItem.アクション可能か, toFlg(afterRules.availableAction))
            updateVillageSetting(villageId, CDef.VillageSettingItem.秘話可能か, toFlg(afterRules.availableSecretSay))
        }
        after.setting.password.let { afterPassword ->
            if (!before.setting.password.existsDifference(afterPassword)) return@let
            updateVillageSetting(villageId, CDef.VillageSettingItem.入村パスワード, afterPassword.joinPassword ?: "")
        }
        after.setting.charachip.let { charachip ->
            if (before.setting.charachip.dummyCharaDay1Message != charachip.dummyCharaDay1Message) {
                updateVillageSetting(
                    villageId,
                    CDef.VillageSettingItem.N1日目ダミー発言,
                    charachip.dummyCharaDay1Message ?: ""
                )
            }
        }

        if (before.setting.tags.existsDifference(after.setting.tags)) {
            villageTagBhv.queryDelete {
                it.query().setVillageId_Equal(villageId)
            }
            after.setting.tags.list.forEach { insertVillageTag(villageId, it) }
        }
    }

    private fun updateMessageRestrictionDifference(
        before: com.ort.firewolf.domain.model.village.Village,
        after: com.ort.firewolf.domain.model.village.Village
    ) {
        val villageId = after.id
        val beforeRestricts = before.setting.rules.messageRestrict
        val afterRestricts = after.setting.rules.messageRestrict
        if (!beforeRestricts.existsDifference(afterRestricts)) return
        // 変更前にしかないものは削除
        beforeRestricts.restrictList.filterNot { beforeRestrict ->
            afterRestricts.restrictList.any { afterRestrict -> beforeRestrict.type.code == afterRestrict.type.code }
        }.forEach { deleteMessageRestriction(villageId, it) }
        // 両方にあるものは更新
        afterRestricts.restrictList.filter { afterRestrict ->
            beforeRestricts.restrictList.any { beforeRestrict -> beforeRestrict.type.code == afterRestrict.type.code }
        }.forEach { updateMessageRestriction(villageId, it) }
        // 変更後にしかないものは登録
        afterRestricts.restrictList.filterNot { afterRestrict ->
            beforeRestricts.restrictList.any { beforeRestrict -> beforeRestrict.type.code == afterRestrict.type.code }
        }.forEach { insertMessageRestriction(villageId, it) }
    }

    // ===================================================================================
    //                                                                             village
    //                                                                        ============
    /**
     * 村登録
     * @param villageModel 村
     * @return villageId
     */
    private fun insertVillage(villageModel: com.ort.firewolf.domain.model.village.Village): Int {
        val village = Village()
        village.villageDisplayName = villageModel.name
        village.villageStatusCodeAsVillageStatus = CDef.VillageStatus.codeOf(villageModel.status.code)
        village.createPlayerId = villageModel.creatorPlayerId
        villageBhv.insert(village)
        return village.villageId
    }

    /**
     * 村更新
     * @param villageModel 村
     */
    private fun updateVillage(villageModel: com.ort.firewolf.domain.model.village.Village) {
        val village = Village()
        village.villageId = villageModel.id
        village.villageDisplayName = villageModel.name
        village.villageStatusCodeAsVillageStatus = villageModel.status.toCdef()
        village.winCampCodeAsCamp = villageModel.winCamp?.toCdef()
        village.epilogueDay = villageModel.setting.time.epilogueDay
        villageBhv.update(village)
    }

    // ===================================================================================
    //                                                                      village_player
    //                                                                        ============
    /**
     * 村参加者登録
     * @param villageId villageId
     * @param participant participant
     * @return 村参加ID
     */
    private fun insertVillagePlayer(
        villageId: Int,
        participant: VillageParticipant
    ): Int {
        val vp = VillagePlayer()
        vp.villageId = villageId
        vp.playerId = participant.playerId
        vp.charaId = participant.charaId
        vp.isDead = false
        vp.isSpectator = participant.isSpectator
        vp.isGone = false
        vp.requestSkillCodeAsSkill = participant.skillRequest.first.toCdef()
        vp.secondRequestSkillCodeAsSkill = participant.skillRequest.second.toCdef()
        vp.charaName = participant.charaName.name
        vp.charaShortName = participant.charaName.shortName
        villagePlayerBhv.insert(vp)
        return vp.villagePlayerId
    }

    private fun updateVillagePlayer(
        villageId: Int,
        villagePlayerModel: VillageParticipant
    ) {
        val villagePlayer = VillagePlayer()
        villagePlayer.villageId = villageId
        villagePlayer.villagePlayerId = villagePlayerModel.id
        villagePlayer.isDead = villagePlayerModel.dead != null
        villagePlayer.deadReasonCodeAsDeadReason = villagePlayerModel.dead?.toCdef()
        villagePlayer.deadVillageDayId = villagePlayerModel.dead?.villageDay?.id
        villagePlayer.isGone = villagePlayerModel.isGone
        villagePlayer.skillCodeAsSkill = villagePlayerModel.skill?.toCdef()
        villagePlayer.requestSkillCodeAsSkill = villagePlayerModel.skillRequest.first.toCdef()
        villagePlayer.secondRequestSkillCodeAsSkill = villagePlayerModel.skillRequest.second.toCdef()
        villagePlayer.isWin = villagePlayerModel.isWin
        villagePlayer.campCode = villagePlayerModel.camp?.code
        villagePlayer.charaName = villagePlayerModel.charaName.name
        villagePlayer.charaShortName = villagePlayerModel.charaName.shortName
        villagePlayerBhv.update(villagePlayer)
    }

    fun updateVillagePlayerNotification(
        participantId: Int,
        notification: VillageParticipantNotificationCondition
    ) {
        villagePlayerNotificationBhv.queryDelete { it.query().setVillagePlayerId_Equal(participantId) }
        val n = VillagePlayerNotification()
        n.villagePlayerId = participantId
        n.discordWebhookUrl = notification.discordWebhookUrl
        n.villageStart = notification.village.start
        n.villageDaychange = notification.village.dayChange
        n.villageEpilogue = notification.village.epilogue
        n.receiveSecretSay = notification.message.secretSay
        n.receiveAbilitySay = notification.message.abilitySay
        n.receiveAnchorSay = notification.message.anchor
        n.keyword = notification.message.keywords.let {
            if (it.isEmpty()) null
            else it.joinToString(separator = " ")
        }
        villagePlayerNotificationBhv.insert(n)
    }

    private fun insertVillagePlayerAccessInfos(participantId: Int, ipAddresses: List<String>) {
        val exists = villagePlayerAccessInfoBhv.selectList {
            it.query().setVillagePlayerId_Equal(participantId)
        }.map { it.ipAddress }
        ipAddresses.filterNot { exists.contains(it) }.forEach {
            insertVillagePlayerAccessInfo(participantId, it)
        }
    }

    private fun insertVillagePlayerAccessInfo(participantId: Int, ipAddress: String) {
        val optAccessInfo = villagePlayerAccessInfoBhv.selectByUniqueOf(participantId, ipAddress)
        if (optAccessInfo.isPresent) return
        val info = VillagePlayerAccessInfo()
        info.villagePlayerId = participantId
        info.ipAddress = ipAddress
        villagePlayerAccessInfoBhv.insert(info)
    }

    private fun insertVillagePlayerStatus(from: Int, to: Int?, type: CDef.VillagePlayerStatusType) {
        val status = VillagePlayerStatus()
        status.villagePlayerId = from
        status.toVillagePlayerId = to
        status.villagePlayerStatusCodeAsVillagePlayerStatusType = type
        villagePlayerStatusBhv.insert(status)
    }

    private fun deleteVillagePlayerStatus(from: Int, to: Int?, type: CDef.VillagePlayerStatusType) {
        villagePlayerStatusBhv.queryDelete {
            it.query().setVillagePlayerId_Equal(from)
            to?.let { to ->
                it.query().setToVillagePlayerId_Equal(to)
            }
            it.query().setVillagePlayerStatusCode_Equal_AsVillagePlayerStatusType(type)
        }
    }

    // ===================================================================================
    //                                                                         village_day
    //                                                                        ============
    /**
     * 村日付登録
     * @param villageId villageId
     * @param day 村日付
     * @return 村日付id
     */
    private fun insertVillageDay(
        villageId: Int,
        day: com.ort.firewolf.domain.model.village.VillageDay
    ): com.ort.firewolf.domain.model.village.VillageDay {
        val villageDay = VillageDay()
        villageDay.villageId = villageId
        villageDay.day = day.day
        villageDay.noonnightCodeAsNoonnight = CDef.Noonnight.codeOf(day.noonnight)
        villageDay.daychangeDatetime = day.dayChangeDatetime
        villageDayBhv.insert(villageDay)
        return VillageDataConverter.convertVillageDayToVillageDay(villageDay)
    }

    private fun updateVillageDay(
        day: com.ort.firewolf.domain.model.village.VillageDay
    ) {
        val villageDay = VillageDay()
        villageDay.villageDayId = day.id
        villageDay.daychangeDatetime = day.dayChangeDatetime
        villageDayBhv.update(villageDay)
    }

    // ===================================================================================
    //                                                                     village_setting
    //                                                                        ============
    /**
     * 村設定登録
     * @param villageId villageId
     * @param settings model settings
     */
    private fun insertVillageSettings(villageId: Int, settings: VillageSettings) {
        insertVillageSetting(villageId, CDef.VillageSettingItem.最低人数, settings.capacity.min.toString())
        insertVillageSetting(villageId, CDef.VillageSettingItem.最大人数, settings.capacity.max.toString())
        insertVillageSetting(villageId, CDef.VillageSettingItem.期間形式, settings.time.termType)
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.開始予定日時,
            settings.time.startDatetime.format(VillageDataConverter.DATETIME_FORMATTER)
        )
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.更新間隔秒,
            settings.time.dayChangeIntervalSeconds.toString()
        )
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.ダミーキャラid,
            settings.charachip.dummyCharaId.toString()
        )
        insertVillageSetting(villageId, CDef.VillageSettingItem.構成, settings.organizations.toString())
        insertVillageSetting(villageId, CDef.VillageSettingItem.記名投票か, toFlg(settings.rules.openVote))
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.役職希望可能か,
            toFlg(settings.rules.availableSkillRequest)
        )
        insertVillageSetting(villageId, CDef.VillageSettingItem.見学可能か, toFlg(settings.rules.availableSpectate))
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.墓下役職公開ありか,
            toFlg(settings.rules.openSkillInGrave)
        )
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.墓下見学発言を生存者が見られるか,
            toFlg(settings.rules.visibleGraveMessage)
        )
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.突然死ありか,
            toFlg(settings.rules.availableSuddenlyDeath)
        )
        insertVillageSetting(villageId, CDef.VillageSettingItem.コミット可能か, toFlg(settings.rules.availableCommit))
        insertVillageSetting(villageId, CDef.VillageSettingItem.入村パスワード, settings.password.joinPassword ?: "")
        insertVillageSetting(villageId, CDef.VillageSettingItem.沈黙時間, settings.time.silentHours?.toString() ?: "")
        insertVillageSetting(villageId, CDef.VillageSettingItem.役欠けありか, toFlg(settings.rules.availableDummySkill))
        insertVillageSetting(villageId, CDef.VillageSettingItem.アクション可能か, toFlg(settings.rules.availableAction))
        insertVillageSetting(villageId, CDef.VillageSettingItem.秘話可能か, toFlg(settings.rules.availableSecretSay))
        // タグ
        settings.tags.list.forEach { insertVillageTag(villageId, it) }
        // ダミーキャラ設定
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.ダミーキャラ略称,
            settings.charachip.dummyCharaShortName
        )
        insertVillageSetting(villageId, CDef.VillageSettingItem.ダミーキャラ名, settings.charachip.dummyCharaName)
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.プロローグダミー発言,
            settings.charachip.dummyCharaDay0Message
        )
        insertVillageSetting(
            villageId,
            CDef.VillageSettingItem.N1日目ダミー発言,
            settings.charachip.dummyCharaDay1Message ?: ""
        )
    }

    private fun insertVillageSetting(villageId: Int, item: CDef.VillageSettingItem, value: String) {
        val setting = VillageSetting()
        setting.villageId = villageId
        setting.villageSettingItemCodeAsVillageSettingItem = item
        setting.villageSettingText = value
        villageSettingBhv.insert(setting)
    }

    private fun updateVillageSetting(villageId: Int, item: CDef.VillageSettingItem, value: String) {
        val setting = VillageSetting()
        setting.villageSettingText = value
        villageSettingBhv.queryUpdate(setting) {
            it.query().setVillageId_Equal(villageId)
            it.query().setVillageSettingItemCode_Equal_AsVillageSettingItem(item)
        }
    }

    private fun insertVillageTag(villageId: Int, tag: String) {
        val entity = VillageTag()
        entity.villageId = villageId
        entity.villageTagItemCode = tag
        villageTagBhv.insert(entity)
    }

    private fun insertVillageCharaGroups(villageId: Int, charachip: VillageCharachip) {
        charachip.charachipIds.forEach {
            insertVillageCharaGroup(villageId, it)
        }
    }

    private fun insertVillageCharaGroup(villageId: Int, charachipId: Int) {
        val v = VillageCharaGroup()
        v.villageId = villageId
        v.charaGroupId = charachipId
        villageCharaGroupBhv.insert(v)
    }

    // ===================================================================================
    //                                                                 message_restriction
    //                                                                        ============
    /**
     * 発言制限登録
     * @param villageId villageId
     * @param setting 村設定
     */
    private fun insertMessageRestrictionList(villageId: Int, setting: VillageSettings) {
        setting.rules.messageRestrict.restrictList.forEach {
            insertMessageRestriction(villageId, it.type.code, it.count, it.length)
        }
    }

    private fun insertMessageRestriction(villageId: Int, messageTypeCode: String, count: Int, length: Int) {
        val restrict = MessageRestriction()
        restrict.villageId = villageId
        restrict.messageTypeCodeAsMessageType = CDef.MessageType.codeOf(messageTypeCode)
        restrict.messageMaxNum = count
        restrict.messageMaxLength = length
        messageRestrictionBhv.insert(restrict)
    }

    private fun insertMessageRestriction(villageId: Int, restrict: VillageMessageRestrict) {
        insertMessageRestriction(villageId, restrict.type.code, restrict.count, restrict.length)
    }

    private fun updateMessageRestriction(villageId: Int, restrictModel: VillageMessageRestrict) {
        val restrict = MessageRestriction()
        restrict.messageMaxNum = restrictModel.count
        restrict.messageMaxLength = restrictModel.length
        messageRestrictionBhv.queryUpdate(restrict) {
            it.query().setVillageId_Equal(villageId)
            it.query().setMessageTypeCode_Equal_AsMessageType(restrictModel.type.toCdef())
        }
    }

    private fun deleteMessageRestriction(villageId: Int, restrict: VillageMessageRestrict) {
        messageRestrictionBhv.queryDelete {
            it.query().setVillageId_Equal(villageId)
            it.query().setMessageTypeCode_Equal_AsMessageType(restrict.type.toCdef())
        }
    }

    // ===================================================================================
    //                                                                        Assist Logic
    //                                                                        ============
    private fun toFlg(bool: Boolean): String {
        return if (bool) VillageDataConverter.FLG_TRUE else VillageDataConverter.FLG_FALSE
    }
}