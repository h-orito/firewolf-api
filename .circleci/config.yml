# Java Maven CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2
jobs:
  build:
    docker:
      # 最初に指定したimageがPrimary containerとなる
      - image: google/cloud-sdk:alpine
      - image: circleci/mysql:5.7.22
        environment:
          - MYSQL_ALLOW_EMPTY_PASSWORD: "true"
          - MYSQL_ROOT_HOST: "%"
        command:
          [
            --character-set-server=utf8,
            --collation-server=utf8_general_ci,
            --default-storage-engine=innodb,
          ]

    branches:
      only:
        - develop
        - master

    working_directory: ~/wolf4busy-api

    environment:
      # Customize the JVM maximum heap limit
      MAVEN_OPTS: -Xmx3200m

    steps:
      # google cloud sdk
      - run:
          name: Install
          command: |
            apk --update add openjdk8
            gcloud components install app-engine-java

      - run:
          name: Dockerize install
          command: |
            apk add --no-cache openssl
            wget https://github.com/jwilder/dockerize/releases/download/v0.6.0/dockerize-alpine-linux-amd64-v0.6.0.tar.gz
            tar -C /usr/local/bin -xzvf dockerize-alpine-linux-amd64-v0.6.0.tar.gz
            rm dockerize-alpine-linux-amd64-v0.6.0.tar.gz

      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "pom.xml" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: ./mvnw dependency:go-offline

      # DBが立ち上がるまで待つ
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - save_cache:
          paths:
            - ~/.m2
          key: v1-dependencies-{{ checksum "pom.xml" }}

      # prepare database
      - run: export answer=y;sh dbflute_wolf4busydb/manage.sh 0 > /dev/null

      # run tests!
      - run: ./mvnw package # run the actual tests

      - run:
          name: Save test results
          command: |
            mkdir -p ~/test-results/junit/
            find . -type f -regex ".*/target/surefire-reports/.*xml" -exec cp {} ~/test-results/junit/ \;
          when: always

      - store_test_results:
          path: ~/test-results
      - store_artifacts:
          path: ~/test-results/junit

      - run:
          name: mod config
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              sed -i -e "s/localhost/${WOLF4BUSY_DBHOST}/" src/main/resources/config/application.yml
              sed -i -e "s/wolf4busyuser/${WOLF4BUSY_DBUSER}/" src/main/resources/config/application.yml
              sed -i -e "s/wolf4busypass/${WOLF4BUSY_DBPASS}/" src/main/resources/config/application.yml
            fi

      - deploy:
          name: Deploy
          command: |
            if [ "$CIRCLE_BRANCH" = "master" ]; then
              echo "${GCP_SERVICE_ACCOUNT_KEY}" | base64 -d > "$HOME/gcp-service-account-key.json"
              gcloud auth activate-service-account --key-file "$HOME/gcp-service-account-key.json"
              gcloud config set project ${GCP_WOLF4BUSY_PROJECT_ID}
              ./mvnw appengine:deploy -DskipTests
            fi

      # deploy to vps
      # - add_ssh_keys:
      #     fingerprints:
      #       - "${SSH_FINGERPRINTS}"

      # - run:
      #     name: Start ssh-keyscan
      #     command: |
      #       ssh-keyscan -p ${SSH_PORT} ${SSH_IPADDRESS} >> ~/.ssh/known_hosts

#      - deploy:
#          name: Upload jar
#          command: |
#           if [ "${CIRCLE_BRANCH}" == "master" ]; then
#            scp -P ${SSH_PORT} ./target/wolf4busy-0.0.1-SNAPSHOT.jar ${SSH_USERNAME}@${SSH_IPADDRESS}:${SSH_APP_PATH}wolf4busy.jar
#           fi
#
#      - run:
#          name: Deploy
#          command: |
#           if [ "${CIRCLE_BRANCH}" == "master" ]; then
#            ssh -p ${SSH_PORT} ${SSH_USERNAME}@${SSH_IPADDRESS} "sudo sh deploy/deploy_busy.sh"
#           fi

# See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
